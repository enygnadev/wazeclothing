
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Função para verificar se o usuário é admin
    function isAdmin() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Função para verificar se é o próprio usuário
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Produtos - leitura pública, escrita apenas admin
    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Usuários - ler/escrever apenas próprios dados ou admin
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) || isAdmin();
      
      // LGPD - Log de acesso aos dados
      allow read: if isOwner(userId) && 
        resource != null && 
        resource.data.consentDate != null;
    }
    
    // Pedidos - ler próprios pedidos ou admin gerenciar todos
    match /orders/{orderId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow update: if isAdmin() || 
        (isOwner(resource.data.userId) && 
         request.resource.data.diff(resource.data).affectedKeys()
         .hasOnly(['status']) && 
         request.resource.data.status == 'cancelled');
    }
    
    // Carrinho - apenas próprio usuário
    match /carts/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Configurações da loja - apenas admin
    match /settings/{document} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Categorias - leitura pública, escrita admin
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Logs de auditoria LGPD - apenas admin
    match /audit_logs/{logId} {
      allow read, write: if isAdmin();
    }
    
    // Dados sensíveis (LGPD) - apenas próprio usuário
    match /user_sensitive_data/{userId} {
      allow read, write: if isOwner(userId);
      allow delete: if isOwner(userId); // Direito ao esquecimento LGPD
    }
    
    // Consentimentos LGPD
    match /consents/{userId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }
    
    // Solicitações de exclusão de dados (LGPD)
    match /data_deletion_requests/{requestId} {
      allow read, write: if isOwner(resource.data.userId) || isAdmin();
    }
    
    // Newsletters - usuário pode se inscrever/desinscrever
    match /newsletters/{email} {
      allow read, write: if request.auth != null;
      allow delete: if request.auth != null; // Unsubscribe
    }
    
    // Avaliações de produtos - usuário pode criar, admin pode moderar
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    // Endereços de entrega - apenas próprio usuário
    match /user_addresses/{userId} {
      match /addresses/{addressId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Histórico de compras para recomendações (anonimizado)
    match /purchase_history/{userId} {
      allow read, write: if isOwner(userId);
      allow read: if isAdmin() && 
        resource.data.keys().hasOnly(['productCategories', 'timestamp']);
    }
  }
}
